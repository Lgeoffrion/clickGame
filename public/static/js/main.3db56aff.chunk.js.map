{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Scoreboard/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","beach","clickedBeachIds","score","goal","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","Scoreboard","components_Wrapper_Wrapper","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o+9CAUeA,SAPF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAChDC,QAAS,kBAAMV,EAAMW,iBAAiBX,EAAMS,KAAKL,UAAU,oBCDpDQ,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCO1CC,EAPD,SAAAd,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cAAkCJ,EAAMe,OACxCd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUJ,EAAMgB,iBCiEnBC,oNA9DbC,MAAQ,CACNC,QACAC,gBAAiB,GACjBC,MAAO,EACPC,KAAM,GACNN,OAAQ,MAIVL,iBAAmB,SAAAF,GACjB,IAAIW,EAAkBG,EAAKL,MAAME,gBAEjC,GAAGA,EAAgBI,SAASf,GAC1Bc,EAAKE,SAAS,CAAEL,gBAAiB,GAAIC,MAAO,EAAGL,OAAS,kDAD1D,CAME,GAFAI,EAAgBM,KAAKjB,GAES,KAA3BW,EAAgBO,OAGjB,OAFAJ,EAAKE,SAAS,CAACJ,MAAO,GAAIL,OAAQ,gCAAiCI,gBAAiB,UACpFQ,QAAQC,IAAI,WAIdN,EAAKE,SAAS,CAAEN,QAAOC,kBAAiBC,MAAOD,EAAgBO,OAAQX,OAAQ,MAE/E,IAAK,IAAIc,EAAIX,EAAMQ,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADCK,EAElB,CAAChB,EAAMY,GAAIZ,EAAMW,IAAvCX,EAAMW,GAFkCK,EAAA,GAE9BhB,EAAMY,GAFwBI,EAAA,8EAQtC,IAAAC,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,2BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,8DAIFH,EAAAC,EAAAC,cAACmC,EAAD,CAAOvB,MAAOsB,KAAKnB,MAAMG,MAClBC,KAAM,GACNN,OAAQqB,KAAKnB,MAAMF,SAE1Bf,EAAAC,EAAAC,cAACoC,EAAD,KACGF,KAAKnB,MAAMC,MAAMqB,IAAI,SAAArB,GAAK,OACzBlB,EAAAC,EAAAC,cAACsC,EAAD,CACE9B,iBAAkByB,EAAKzB,iBACvBF,GAAIU,EAAMV,GACViC,IAAKvB,EAAMV,GACXD,MAAOW,EAAMX,mBAvDTmC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3db56aff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card img-container\">\r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","\r\nimport React from \"react\";\r\n\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\">Your Score {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Score from \"./components/Scoreboard/Scoreboard\";\nimport beach from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.beach to the cards json array\n  state = {\n    beach,\n    clickedBeachIds: [],\n    score: 0,\n    goal: 12,\n    status: \"\"\n  };\n\n  //shuffle the beach cards when clicked\n  shuffleScoreCard = id => {\n    let clickedBeachIds = this.state.clickedBeachIds;\n\n    if(clickedBeachIds.includes(id)){\n      this.setState({ clickedBeachIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n      return;\n    }else{\n      clickedBeachIds.push(id)\n\n      if(clickedBeachIds.length === 12){\n        this.setState({score: 12, status: \"You Won! Click to play again!\", clickedBeachIds: []});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ beach, clickedBeachIds, score: clickedBeachIds.length, status: \" \" });\n\n      for (let i = beach.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [beach[i], beach[j]] = [beach[j], beach[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Dream Beach Memory Game</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice! Get all 12 to win!\n          </p>\n        </header>\n        <Score total={this.state.score}\n               goal={12}\n               status={this.state.status}\n               />\n        <Wrapper>\n          {this.state.beach.map(beach => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={beach.id}\n              key={beach.id}\n              image={beach.image}\n            />\n          ))}\n        </Wrapper>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}